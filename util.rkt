#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.0.23 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 29 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 66 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 9 #"Consolas\0"
0 15 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 -1 1 #"\0"
0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0 13 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
22 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
41 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
43 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 4567 0 26 3 12 #"#lang racket"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 26 #";; untested as of 2011-09:"
0 0 22 29 1 #"\n"
0 0 17 3 17 #"#|make-squaretone"
0 0 17 29 1 #"\n"
0 0 17 3 12 #"make-zugtone"
0 0 17 29 1 #"\n"
0 0 17 3 18 #"make-sawtooth-tone"
0 0 17 29 1 #"\n"
0 0 17 3 8 #"signal-*"
0 0 17 29 1 #"\n"
0 0 17 3 9 #"signal-+s"
0 0 17 29 1 #"\n"
0 0 17 3 10 #"split-in-4"
0 0 17 29 1 #"\n"
0 0 17 3 5 #"times"
0 0 17 29 1 #"\n"
0 0 17 3 4 #"adsr"
0 0 17 29 1 #"\n"
0 0 17 3 16 #"rsound-fft/right"
0 0 17 29 1 #"\n"
0 0 17 3 17 #"rsound-max-volume"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 7 #"require"
0 0 22 3 1 #" "
0 0 19 3 12 #"\"rsound.rkt\""
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 19 3 9 #"\"fft.rkt\""
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 19 3 21 #"\"integral-cycles.rkt\""
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 19 3 15 #"\"wavetable.rkt\""
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 13 #"racket/flonum"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 10 #"ffi/vector"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 10 #"for-syntax"
0 0 22 3 1 #" "
0 0 14 3 12 #"syntax/parse"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 5 #"twopi"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 14 3 2 #"pi"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 7 #"provide"
0 0 22 3 1 #" "
0 0 14 3 6 #"rs-map"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 10 #"rs-map/idx"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 8 #"rs-scale"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 8 #"resample"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 4 #"clip"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 7 #"rs-mult"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 5 #"twopi"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 9 #"sine-wave"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 13 #"sawtooth-wave"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 20 #"approx-sawtooth-wave"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 11 #"square-wave"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 10 #"harm3-wave"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 5 #"noise"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 9 #"rearrange"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 17 3 23 #";; functions on numbers"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 6 #"thresh"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 17 3 16 #";; envelope-funs"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 5 #"fader"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 13 #"frisellinator"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 17 3 18 #";; special signals"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 9 #"dc-signal"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 17 3 19 #";; signal combiners"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 9 #"signal-*s"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 9 #"signal-+s"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 13 #"thresh/signal"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 12 #"signal-scale"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 11 #"clip&volume"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 19 #"rsound->signal/left"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 20 #"rsound->signal/right"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 17 #"rs-largest-sample"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 17 3 16 #";; rsound makers"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 9 #"make-tone"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 15 #"make-squaretone"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 18 #"make-sawtooth-tone"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 12 #"make-zugtone"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 14 #"make-harm3tone"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 15 #"make-pulse-tone"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 21 #"make-square-fade-tone"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 23 #"make-sawtooth-fade-tone"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 19 #"wavefun->tone-maker"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 4 #"ding"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 9 #"make-ding"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 10 #"split-in-4"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 5 #"times"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 11 #"rs-overlay*"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 10 #"rs-overlay"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 4 #"mono"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 15 #"vectors->rsound"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 11 #"tile-to-len"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 9 #"fader-snd"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 15 #"rsound-fft/left"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 16 #"rsound-fft/right"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 17 #"rsound-max-volume"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 6 #"signal"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 20 #"midi-note-num->pitch"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 17 3 15 #";; for testing:"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 13 #"raw-sine-wave"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 15 #"raw-square-wave"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 17 #"raw-sawtooth-wave"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 11 #"binary-logn"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         )"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 59
#";; given a function from numbers to numbers and an rsound, "
0 0 22 29 1 #"\n"
0 0 17 3 55 #";; produce a new rsound where every sample is modified "
0 0 22 29 1 #"\n"
0 0 17 3 34 #";; by applying the given function."
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 6 #"rs-map"
0 0 22 3 1 #" "
0 0 14 3 3 #"fun"
0 0 22 3 1 #" "
0 0 14 3 5 #"sound"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 10 #"rs-map/idx"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"s"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 3 #") ("
0 0 14 3 3 #"fun"
0 0 22 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 3 #")) "
0 0 14 3 5 #"sound"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 68
#";; given (a function from sample and index to sample) and an rsound,"
0 0 22 29 1 #"\n"
0 0 17 3 55 #";; produce a new rsound where every sample is modified "
0 0 22 29 1 #"\n"
0 0 17 3 33 #";; by applying the given function"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 10 #"rs-map/idx"
0 0 22 3 1 #" "
0 0 14 3 3 #"fun"
0 0 22 3 1 #" "
0 0 14 3 5 #"sound"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 4 #"left"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 3 #") ("
0 0 14 3 3 #"fun"
0 0 22 3 2 #" ("
0 0 14 3 11 #"rs-ith/left"
0 0 22 3 1 #" "
0 0 14 3 5 #"sound"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 2 #") "
0 0 14 3 1 #"i"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 5 #"right"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 3 #") ("
0 0 14 3 3 #"fun"
0 0 22 3 2 #" ("
0 0 14 3 12 #"rs-ith/right"
0 0 22 3 1 #" "
0 0 14 3 5 #"sound"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 2 #") "
0 0 14 3 1 #"i"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 12 #"parameterize"
0 0 22 3 3 #" (["
0 0 15 3 19 #"default-sample-rate"
0 0 22 3 2 #" ("
0 0 14 3 18 #"rsound-sample-rate"
0 0 22 3 1 #" "
0 0 14 3 5 #"sound"
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 15 #"signals->rsound"
0 0 22 3 2 #" ("
0 0 14 3 9 #"rs-frames"
0 0 22 3 1 #" "
0 0 14 3 5 #"sound"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                   "
0 0 14 3 4 #"left"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                   "
0 0 14 3 5 #"right"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 41 #";; rsound-scale : number rsound -> rsound"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 8 #"rs-scale"
0 0 22 3 1 #" "
0 0 14 3 6 #"scalar"
0 0 22 3 1 #" "
0 0 14 3 6 #"rsound"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 6 #"rs-map"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 3 #") ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 14 3 6 #"scalar"
0 0 22 3 3 #")) "
0 0 14 3 6 #"rsound"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 34 #";; clip : rsound nat nat -> rsound"
0 0 22 29 1 #"\n"
0 0 17 3 59
#";; extract a chunk of an rsound, beginning at frame 'start'"
0 0 22 29 1 #"\n"
0 0 17 3 34 #";; and ending before frame 'end'. "
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 4 #"clip"
0 0 22 3 1 #" "
0 0 14 3 5 #"sound"
0 0 22 3 1 #" "
0 0 14 3 5 #"start"
0 0 22 3 1 #" "
0 0 14 3 6 #"finish"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"unless"
0 0 22 3 2 #" ("
0 0 14 3 7 #"rsound?"
0 0 22 3 1 #" "
0 0 14 3 5 #"sound"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 16 #"raise-type-error"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"rsound-clip"
0 0 22 3 1 #" "
0 0 19 3 8 #"\"rsound\""
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #" "
0 0 14 3 5 #"sound"
0 0 22 3 1 #" "
0 0 14 3 5 #"start"
0 0 22 3 1 #" "
0 0 14 3 6 #"finish"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"unless"
0 0 22 3 2 #" ("
0 0 14 3 20 #"nonnegative-integer?"
0 0 22 3 1 #" "
0 0 14 3 5 #"start"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 16 #"raise-type-error"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"rsound-clip"
0 0 22 3 1 #" "
0 0 19 3 22 #"\"non-negative integer\""
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 14 3 5 #"sound"
0 0 22 3 1 #" "
0 0 14 3 5 #"start"
0 0 22 3 1 #" "
0 0 14 3 6 #"finish"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"unless"
0 0 22 3 2 #" ("
0 0 14 3 20 #"nonnegative-integer?"
0 0 22 3 1 #" "
0 0 14 3 6 #"finish"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 16 #"raise-type-error"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"rsound-clip"
0 0 22 3 1 #" "
0 0 19 3 22 #"\"non-negative integer\""
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 14 3 5 #"sound"
0 0 22 3 1 #" "
0 0 14 3 5 #"start"
0 0 22 3 1 #" "
0 0 14 3 6 #"finish"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"unless"
0 0 22 3 2 #" ("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 2 #"<="
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #" "
0 0 14 3 5 #"start"
0 0 22 3 1 #" "
0 0 14 3 6 #"finish"
0 0 22 3 2 #" ("
0 0 14 3 9 #"rs-frames"
0 0 22 3 1 #" "
0 0 14 3 5 #"sound"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"clip"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 11 #"           "
0 0 14 3 23 #"frames-out-of-range-msg"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"           "
0 0 14 3 5 #"start"
0 0 22 3 1 #" "
0 0 14 3 6 #"finish"
0 0 22 3 2 #" ("
0 0 14 3 9 #"rs-frames"
0 0 22 3 1 #" "
0 0 14 3 5 #"sound"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 12 #"match-define"
0 0 22 3 2 #" ("
0 0 14 3 6 #"rsound"
0 0 22 3 1 #" "
0 0 14 3 4 #"data"
0 0 22 3 1 #" "
0 0 14 3 9 #"old-start"
0 0 22 3 1 #" "
0 0 14 3 8 #"old-stop"
0 0 22 3 1 #" "
0 0 14 3 11 #"sample-rate"
0 0 22 3 2 #") "
0 0 14 3 5 #"sound"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 6 #"rsound"
0 0 22 3 1 #" "
0 0 14 3 4 #"data"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 9 #"old-start"
0 0 22 3 2 #" ("
0 0 14 3 3 #"i2e"
0 0 22 3 1 #" "
0 0 14 3 5 #"start"
0 0 22 3 3 #")) "
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 9 #"old-start"
0 0 22 3 2 #" ("
0 0 14 3 3 #"i2e"
0 0 22 3 1 #" "
0 0 14 3 6 #"finish"
0 0 22 3 3 #")) "
0 0 14 3 11 #"sample-rate"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 23 #"frames-out-of-range-msg"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 13 #"string-append"
0 0 22 3 1 #" "
0 0 19 3 39 #"\"must have 0 < start < end < frames.  \""
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                 "
0 0 19 3 62
#"\"You provided start ~s and end ~s for a sound with ~s frames.\""
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 73
(
 #";; given a factor and a sound, resample the sound (using simple roun"
 #"ding)"
) 0 0 22 29 1 #"\n"
0 0 17 3 70
(
 #";; to obtain a new one. Using e.g. factor of 2 will make the sound o"
 #"ne"
) 0 0 22 29 1 #"\n"
0 0 17 3 34 #";; octave higher and half as long."
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 8 #"resample"
0 0 22 3 1 #" "
0 0 14 3 6 #"factor"
0 0 22 3 1 #" "
0 0 14 3 5 #"sound"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 4 #"left"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 3 #") ("
0 0 14 3 11 #"rs-ith/left"
0 0 22 3 1 #" "
0 0 14 3 5 #"sound"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 33 #"                                ("
0 0 14 3 14 #"inexact->exact"
0 0 22 3 2 #" ("
0 0 14 3 5 #"floor"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 6 #"factor"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 5 #"right"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 3 #") ("
0 0 14 3 12 #"rs-ith/right"
0 0 22 3 1 #" "
0 0 14 3 5 #"sound"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 35 #"                                  ("
0 0 14 3 14 #"inexact->exact"
0 0 22 3 2 #" ("
0 0 14 3 5 #"floor"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 6 #"factor"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 12 #"parameterize"
0 0 22 3 3 #" (["
0 0 15 3 19 #"default-sample-rate"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 20 #"                   ("
0 0 14 3 18 #"rsound-sample-rate"
0 0 22 3 1 #" "
0 0 14 3 5 #"sound"
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 15 #"signals->rsound"
0 0 22 3 2 #" ("
0 0 14 3 14 #"inexact->exact"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ("
0 0 14 3 5 #"floor"
0 0 22 3 2 #" ("
0 0 14 3 1 #"/"
0 0 22 3 2 #" ("
0 0 14 3 9 #"rs-frames"
0 0 22 3 1 #" "
0 0 14 3 5 #"sound"
0 0 22 3 2 #") "
0 0 14 3 6 #"factor"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                     "
0 0 14 3 4 #"left"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                     "
0 0 14 3 5 #"right"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 57 #";; produce a new rsound by multiplying each sample in the"
0 0 22 29 1 #"\n"
0 0 17 3 60
#";; first by each sample in the second. The length and sample"
0 0 22 29 1 #"\n"
0 0 17 3 60
#";; rate are determined by the first, and nonexistent samples"
0 0 22 29 1 #"\n"
0 0 17 3 39 #";; in the second are taken to be zeros."
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 7 #"rs-mult"
0 0 22 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 4 #"len1"
0 0 22 3 2 #" ("
0 0 14 3 9 #"rs-frames"
0 0 22 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 4 #"len2"
0 0 22 3 2 #" ("
0 0 14 3 9 #"rs-frames"
0 0 22 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 7 #"new-snd"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 12 #"parameterize"
0 0 22 3 3 #" (["
0 0 15 3 19 #"default-sample-rate"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ("
0 0 14 3 18 #"rsound-sample-rate"
0 0 22 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 7 #"silence"
0 0 22 3 1 #" "
0 0 14 3 4 #"len1"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 3 #"for"
0 0 22 3 3 #" (["
0 0 14 3 1 #"i"
0 0 22 3 2 #" ("
0 0 14 3 8 #"in-range"
0 0 22 3 2 #" ("
0 0 14 3 3 #"min"
0 0 22 3 1 #" "
0 0 14 3 4 #"len1"
0 0 22 3 1 #" "
0 0 14 3 4 #"len2"
0 0 22 3 4 #"))])"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 20 #"set-rs-ith/left/s16!"
0 0 22 3 1 #" "
0 0 14 3 7 #"new-snd"
0 0 22 29 1 #"\n"
0 0 22 3 26 #"                          "
0 0 14 3 1 #"i"
0 0 22 29 1 #"\n"
0 0 22 3 27 #"                          ("
0 0 14 3 14 #"inexact->exact"
0 0 22 29 1 #"\n"
0 0 22 3 28 #"                           ("
0 0 14 3 5 #"floor"
0 0 22 29 1 #"\n"
0 0 22 3 29 #"                            ("
0 0 14 3 1 #"*"
0 0 22 3 2 #" ("
0 0 14 3 15 #"rs-ith/left/s16"
0 0 22 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 32 #"                               ("
0 0 14 3 11 #"rs-ith/left"
0 0 22 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 21 #"set-rs-ith/right/s16!"
0 0 22 3 1 #" "
0 0 14 3 7 #"new-snd"
0 0 22 29 1 #"\n"
0 0 22 3 27 #"                           "
0 0 14 3 1 #"i"
0 0 22 29 1 #"\n"
0 0 22 3 28 #"                           ("
0 0 14 3 14 #"inexact->exact"
0 0 22 29 1 #"\n"
0 0 22 3 29 #"                            ("
0 0 14 3 5 #"floor"
0 0 22 29 1 #"\n"
0 0 22 3 30 #"                             ("
0 0 14 3 1 #"*"
0 0 22 3 2 #" ("
0 0 14 3 16 #"rs-ith/right/s16"
0 0 22 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 33 #"                                ("
0 0 14 3 12 #"rs-ith/right"
0 0 22 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 14 3 7 #"new-snd"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 54 #";; given a wavetable, make a wavetable lookup function"
0 0 22 29 1 #"\n"
0 0 17 3 50 #";; how much slower would it be with interpolation?"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 3 #" (("
0 0 14 3 24 #"make-table-based-wavefun"
0 0 22 3 1 #" "
0 0 14 3 3 #"vec"
0 0 22 3 2 #") "
0 0 14 3 5 #"pitch"
0 0 22 3 1 #" "
0 0 14 3 11 #"sample-rate"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 14 #"relative-pitch"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 5 #"pitch"
0 0 22 3 2 #" ("
0 0 14 3 1 #"/"
0 0 22 3 1 #" "
0 0 14 3 27 #"wavetable-build-sample-rate"
0 0 22 3 1 #" "
0 0 14 3 11 #"sample-rate"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 9 #"skip-rate"
0 0 22 3 2 #" ("
0 0 14 3 14 #"inexact->exact"
0 0 22 3 2 #" ("
0 0 14 3 5 #"round"
0 0 22 3 1 #" "
0 0 14 3 14 #"relative-pitch"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 12 #"flvector-ref"
0 0 22 3 1 #" "
0 0 14 3 3 #"vec"
0 0 22 3 2 #" ("
0 0 14 3 6 #"modulo"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #" "
0 0 14 3 9 #"skip-rate"
0 0 22 3 2 #") "
0 0 14 3 27 #"wavetable-build-sample-rate"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 60
#";; given a raw function, produce a table-based version of it"
0 0 22 29 1 #"\n"
0 0 17 3 55 #";; (nat nat -> (nat -> fl)) -> (nat nat -> (nat -> fl))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 21 #"make-checked-wave-fun"
0 0 22 3 1 #" "
0 0 14 3 12 #"raw-wave-fun"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 22 3 3 #" (["
0 0 14 3 5 #"table"
0 0 22 3 2 #" ("
0 0 14 3 15 #"build-wavetable"
0 0 22 3 1 #" "
0 0 14 3 12 #"raw-wave-fun"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ["
0 0 14 3 15 #"table-based-fun"
0 0 22 3 2 #" ("
0 0 14 3 24 #"make-table-based-wavefun"
0 0 22 3 1 #" "
0 0 14 3 5 #"table"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ["
0 0 14 3 8 #"table-sr"
0 0 22 3 2 #" ("
0 0 15 3 19 #"default-sample-rate"
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 5 #"pitch"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 4 #"when"
0 0 22 3 2 #" ("
0 0 14 3 1 #"="
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #" "
0 0 14 3 5 #"pitch"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 16 #"raise-type-error"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 8 #"wave-fun"
0 0 22 3 1 #" "
0 0 19 3 16 #"\"nonzero number\""
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #" "
0 0 14 3 5 #"pitch"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 22 3 3 #" [("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 8 #"integer?"
0 0 22 3 1 #" "
0 0 14 3 5 #"pitch"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 14 3 1 #"="
0 0 22 3 2 #" ("
0 0 15 3 19 #"default-sample-rate"
0 0 22 3 2 #") "
0 0 14 3 8 #"table-sr"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 15 #"table-based-fun"
0 0 22 3 2 #" ("
0 0 14 3 14 #"inexact->exact"
0 0 22 3 1 #" "
0 0 14 3 5 #"pitch"
0 0 22 3 3 #") ("
0 0 15 3 19 #"default-sample-rate"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 14 3 12 #"raw-wave-fun"
0 0 22 3 1 #" "
0 0 14 3 5 #"pitch"
0 0 22 3 2 #" ("
0 0 15 3 19 #"default-sample-rate"
0 0 22 3 7 #"))]))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 26 #";; SYNTHESIS OF SINE WAVES"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 42 #";; raw-sine-wave : number number -> signal"
0 0 22 29 1 #"\n"
0 0 17 3 62
#";; given a pitch and a sample rate, produce a sine wave signal"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 13 #"raw-sine-wave"
0 0 22 3 1 #" "
0 0 14 3 5 #"pitch"
0 0 22 3 1 #" "
0 0 14 3 11 #"sample-rate"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 6 #"tpisrp"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 14 3 2 #"pi"
0 0 22 3 2 #" ("
0 0 14 3 1 #"/"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 14 3 11 #"sample-rate"
0 0 22 3 2 #") "
0 0 14 3 5 #"pitch"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"i"
0 0 22 3 3 #") ("
0 0 14 3 3 #"sin"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 6 #"tpisrp"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 9 #"sine-wave"
0 0 22 3 2 #" ("
0 0 14 3 21 #"make-checked-wave-fun"
0 0 22 3 1 #" "
0 0 14 3 13 #"raw-sine-wave"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 34 #";; SYNTHESIS OF THREE-PARTIAL SINE"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 14 #"raw-harm3-wave"
0 0 22 3 1 #" "
0 0 14 3 5 #"pitch"
0 0 22 3 1 #" "
0 0 14 3 11 #"sample-rate"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (["
0 0 14 3 7 #"scalar1"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 5 #"twopi"
0 0 22 3 1 #" "
0 0 14 3 5 #"pitch"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ["
0 0 14 3 7 #"scalar2"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 5 #"twopi"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 14 3 5 #"pitch"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ["
0 0 14 3 7 #"scalar3"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 5 #"twopi"
0 0 22 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #" "
0 0 14 3 5 #"pitch"
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (["
0 0 14 3 1 #"t"
0 0 22 3 2 #" ("
0 0 14 3 1 #"/"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #" "
0 0 14 3 11 #"sample-rate"
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 1 #"+"
0 0 22 3 2 #" ("
0 0 14 3 3 #"sin"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 7 #"scalar1"
0 0 22 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 20 3 3 #"0.5"
0 0 22 3 2 #" ("
0 0 14 3 3 #"sin"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 7 #"scalar2"
0 0 22 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 20 3 4 #"0.25"
0 0 22 3 2 #" ("
0 0 14 3 3 #"sin"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 7 #"scalar3"
0 0 22 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 8 #"))))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 10 #"harm3-wave"
0 0 22 3 2 #" ("
0 0 14 3 21 #"make-checked-wave-fun"
0 0 22 3 1 #" "
0 0 14 3 14 #"raw-harm3-wave"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 33 #";; SYNTHESIS OF TRIANGULAR WAVES:"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 17 #"raw-sawtooth-wave"
0 0 22 3 1 #" "
0 0 14 3 5 #"pitch"
0 0 22 3 1 #" "
0 0 14 3 11 #"sample-rate"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (["
0 0 14 3 6 #"scalar"
0 0 22 3 2 #" ("
0 0 14 3 14 #"exact->inexact"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 5 #"pitch"
0 0 22 3 2 #" ("
0 0 14 3 1 #"/"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 14 3 11 #"sample-rate"
0 0 22 3 6 #"))))])"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 4 #"let*"
0 0 22 3 3 #" (["
0 0 14 3 9 #"unwrapped"
0 0 22 3 2 #" ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 3 #"1.0"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 2 #" ("
0 0 14 3 14 #"exact->inexact"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 2 #") "
0 0 14 3 6 #"scalar"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ["
0 0 14 3 6 #"scaled"
0 0 22 3 2 #" ("
0 0 14 3 1 #"/"
0 0 22 3 1 #" "
0 0 14 3 9 #"unwrapped"
0 0 22 3 1 #" "
0 0 20 3 3 #"2.0"
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 1 #"-"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 20 3 3 #"2.0"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 6 #"scaled"
0 0 22 3 2 #" ("
0 0 14 3 5 #"floor"
0 0 22 3 1 #" "
0 0 14 3 6 #"scaled"
0 0 22 3 4 #"))) "
0 0 20 3 3 #"1.0"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 13 #"sawtooth-wave"
0 0 22 3 2 #" ("
0 0 14 3 21 #"make-checked-wave-fun"
0 0 22 3 1 #" "
0 0 14 3 17 #"raw-sawtooth-wave"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 30 #";; a memoized 20-term sawtooth"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 14 #"sawtooth-terms"
0 0 22 3 1 #" "
0 0 20 3 2 #"20"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 24 #"raw-sawtooth-approx-wave"
0 0 22 3 1 #" "
0 0 14 3 5 #"pitch"
0 0 22 3 1 #" "
0 0 14 3 11 #"sample-rate"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (["
0 0 14 3 6 #"scalar"
0 0 22 3 2 #" ("
0 0 14 3 14 #"exact->inexact"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 5 #"twopi"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 5 #"pitch"
0 0 22 3 2 #" ("
0 0 14 3 1 #"/"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 14 3 11 #"sample-rate"
0 0 22 3 6 #"))))])"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"i"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 8 #"for/fold"
0 0 22 3 3 #" (["
0 0 14 3 3 #"sum"
0 0 22 3 1 #" "
0 0 20 3 3 #"0.0"
0 0 22 3 2 #"])"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        (["
0 0 14 3 1 #"t"
0 0 22 3 2 #" ("
0 0 14 3 8 #"in-range"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 14 3 14 #"sawtooth-terms"
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 3 #"sum"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 22 3 1 #" "
0 0 20 3 2 #"-1"
0 0 22 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 3 #") ("
0 0 14 3 1 #"/"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 5 #"twopi"
0 0 22 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 4 #")) ("
0 0 14 3 3 #"sin"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #" "
0 0 14 3 6 #"scalar"
0 0 22 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 8 #"))))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 20 #"approx-sawtooth-wave"
0 0 22 3 2 #" ("
0 0 14 3 21 #"make-checked-wave-fun"
0 0 22 3 1 #" "
0 0 14 3 24 #"raw-sawtooth-approx-wave"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 15 #";; square waves"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 15 #"raw-square-wave"
0 0 22 3 1 #" "
0 0 14 3 5 #"pitch"
0 0 22 3 1 #" "
0 0 14 3 11 #"sample-rate"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 22 3 3 #" (["
0 0 14 3 6 #"period"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 11 #"sample-rate"
0 0 22 3 2 #" ("
0 0 14 3 1 #"/"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 14 3 5 #"pitch"
0 0 22 3 4 #"))])"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 4 #"let*"
0 0 22 3 3 #" (["
0 0 14 3 6 #"scaled"
0 0 22 3 2 #" ("
0 0 14 3 1 #"/"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #" "
0 0 14 3 6 #"period"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ["
0 0 14 3 4 #"frac"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 6 #"scaled"
0 0 22 3 2 #" ("
0 0 14 3 5 #"floor"
0 0 22 3 1 #" "
0 0 14 3 6 #"scaled"
0 0 22 3 4 #"))])"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 22 3 3 #" [("
0 0 14 3 1 #"<"
0 0 22 3 1 #" "
0 0 14 3 4 #"frac"
0 0 22 3 1 #" "
0 0 20 3 3 #"0.5"
0 0 22 3 2 #") "
0 0 20 3 3 #"1.0"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ["
0 0 14 3 4 #"else"
0 0 22 3 1 #" "
0 0 20 3 4 #"-1.0"
0 0 22 3 6 #"])))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 11 #"square-wave"
0 0 22 3 2 #" ("
0 0 14 3 21 #"make-checked-wave-fun"
0 0 22 3 1 #" "
0 0 14 3 15 #"raw-square-wave"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 26 #";;fader : frames -> signal"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 5 #"fader"
0 0 22 3 1 #" "
0 0 14 3 11 #"fade-frames"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (["
0 0 14 3 1 #"p"
0 0 22 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 22 3 1 #" "
0 0 20 3 5 #"0.001"
0 0 22 3 2 #" ("
0 0 14 3 1 #"/"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 14 3 11 #"fade-frames"
0 0 22 3 4 #"))])"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 4 #"expt"
0 0 22 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 35 #";; frisellinator : frames -> signal"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 13 #"frisellinator"
0 0 22 3 1 #" "
0 0 14 3 12 #"intro-frames"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 22 3 3 #" [("
0 0 14 3 1 #"<"
0 0 22 3 1 #" "
0 0 14 3 12 #"intro-frames"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 2 #") "
0 0 20 3 3 #"1.0"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 20 3 3 #"0.5"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 20 3 3 #"1.0"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cos"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 2 #"pi"
0 0 22 3 2 #" ("
0 0 14 3 1 #"/"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #" "
0 0 14 3 12 #"intro-frames"
0 0 22 3 9 #")))))])))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 31 #";; dc-signal : number -> signal"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 9 #"dc-signal"
0 0 22 3 1 #" "
0 0 14 3 6 #"volume"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"i"
0 0 22 3 2 #") "
0 0 14 3 6 #"volume"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 9 #"signal-*s"
0 0 22 3 1 #" "
0 0 14 3 3 #"lof"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"i"
0 0 22 3 3 #") ("
0 0 14 3 5 #"apply"
0 0 22 3 1 #" "
0 0 14 3 1 #"*"
0 0 22 3 2 #" ("
0 0 14 3 3 #"map"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 3 #") ("
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 3 #")) "
0 0 14 3 3 #"lof"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 8 #"signal-*"
0 0 22 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 3 #") ("
0 0 14 3 9 #"signal-*s"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 9 #"signal-+s"
0 0 22 3 1 #" "
0 0 14 3 3 #"lof"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"i"
0 0 22 3 3 #") ("
0 0 14 3 5 #"apply"
0 0 22 3 1 #" "
0 0 14 3 1 #"+"
0 0 22 3 2 #" ("
0 0 14 3 3 #"map"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 3 #") ("
0 0 14 3 1 #"x"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 3 #")) "
0 0 14 3 3 #"lof"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 62
#";; given a number and a signal, scale the number by the signal"
0 0 22 29 1 #"\n"
0 0 17 3 58
#";; this can be done using signal-* and dc-signal, but this"
0 0 22 29 1 #"\n"
0 0 17 3 31 #";; turns out to be a lot faster"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 9 #"sig-scale"
0 0 22 3 1 #" "
0 0 14 3 6 #"volume"
0 0 22 3 1 #" "
0 0 14 3 6 #"signal"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"i"
0 0 22 3 3 #") ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 6 #"volume"
0 0 22 3 2 #" ("
0 0 14 3 6 #"signal"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 72
(
 #";; convert a wavefun into a tone-maker; basically just keep a hash t"
 #"able"
) 0 0 22 29 1 #"\n"
0 0 17 3 34 #";; of previously generated sounds."
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 19 #"wavefun->tone-maker"
0 0 22 3 1 #" "
0 0 14 3 7 #"wavefun"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (["
0 0 14 3 10 #"tone-table"
0 0 22 3 2 #" ("
0 0 14 3 9 #"make-hash"
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 5 #"pitch"
0 0 22 3 1 #" "
0 0 14 3 6 #"volume"
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 11 #"sample-rate"
0 0 22 3 2 #" ("
0 0 15 3 19 #"default-sample-rate"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 3 #"key"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 14 3 5 #"pitch"
0 0 22 3 1 #" "
0 0 14 3 6 #"volume"
0 0 22 3 1 #" "
0 0 14 3 11 #"sample-rate"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 17 #"compute-and-store"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 3 #"snd"
0 0 22 3 2 #" ("
0 0 14 3 14 #"signal->rsound"
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 30 #"                             ("
0 0 14 3 7 #"wavefun"
0 0 22 3 1 #" "
0 0 14 3 5 #"pitch"
0 0 22 3 1 #" "
0 0 14 3 6 #"volume"
0 0 22 3 1 #" "
0 0 14 3 11 #"sample-rate"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 9 #"hash-set!"
0 0 22 3 1 #" "
0 0 14 3 10 #"tone-table"
0 0 22 3 1 #" "
0 0 14 3 3 #"key"
0 0 22 3 1 #" "
0 0 14 3 3 #"snd"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 14 3 3 #"snd"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 5 #"match"
0 0 22 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 22 3 1 #" "
0 0 14 3 10 #"tone-table"
0 0 22 3 1 #" "
0 0 14 3 3 #"key"
0 0 22 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 17 3 3 #";; "
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ["
0 0 20 3 2 #"#f"
0 0 22 3 2 #" ("
0 0 14 3 17 #"compute-and-store"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        [("
0 0 14 3 3 #"and"
0 0 22 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 2 #" ("
0 0 15 3 6 #"struct"
0 0 22 3 1 #" "
0 0 14 3 6 #"rsound"
0 0 22 3 2 #" ("
0 0 14 3 4 #"data"
0 0 22 3 1 #" "
0 0 14 3 5 #"start"
0 0 22 3 1 #" "
0 0 14 3 4 #"stop"
0 0 22 3 1 #" "
0 0 14 3 11 #"sample-rate"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" ()"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 13 #"stored-frames"
0 0 22 3 2 #" ("
0 0 14 3 9 #"rs-frames"
0 0 22 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 15 3 4 #"cond"
0 0 22 3 3 #" [("
0 0 14 3 1 #"="
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 1 #" "
0 0 14 3 13 #"stored-frames"
0 0 22 3 2 #") "
0 0 14 3 1 #"s"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                 [("
0 0 14 3 1 #"<"
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 1 #" "
0 0 14 3 13 #"stored-frames"
0 0 22 3 3 #") ("
0 0 14 3 4 #"clip"
0 0 22 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 17 #"compute-and-store"
0 0 22 3 9 #")]))]))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 79
(
 #";; OPTIMIZATION: don't generate everything, stop when the wave comes"
 #" out \"even\""
) 0 0 22 29 1 #"\n"
0 0 17 3 69
(
 #";; on a frame. WARNING! Assumes that the sound is periodic. Don't us"
 #"e"
) 0 0 22 29 1 #"\n"
0 0 17 3 63
#";; this for sounds that aren't periodic on the given frequency."
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 76
(
 #";; NB: cache depends on volume, too; for some applications, caching "
 #"a single"
) 0 0 22 29 1 #"\n"
0 0 17 3 74
(
 #";; full-volume copy of the waveform could be a big win. It depends o"
 #"n how "
) 0 0 22 29 1 #"\n"
0 0 17 3 34 #";; many different volumes you use."
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 28 #"wavefun->tone-maker/periodic"
0 0 22 3 1 #" "
0 0 14 3 7 #"wavefun"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (["
0 0 14 3 10 #"tone-table"
0 0 22 3 2 #" ("
0 0 14 3 9 #"make-hash"
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 5 #"pitch"
0 0 22 3 1 #" "
0 0 14 3 6 #"volume"
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 11 #"sample-rate"
0 0 22 3 2 #" ("
0 0 15 3 19 #"default-sample-rate"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 3 #"key"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 14 3 5 #"pitch"
0 0 22 3 1 #" "
0 0 14 3 6 #"volume"
0 0 22 3 1 #" "
0 0 14 3 11 #"sample-rate"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 17 #"compute-and-store"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 10 #"num-cycles"
0 0 22 3 2 #" ("
0 0 14 3 13 #"cycles-to-use"
0 0 22 3 1 #" "
0 0 14 3 5 #"pitch"
0 0 22 3 1 #" "
0 0 14 3 11 #"sample-rate"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 16 #"generated-frames"
0 0 22 3 2 #" ("
0 0 14 3 5 #"round"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 10 #"num-cycles"
0 0 22 3 2 #" ("
0 0 14 3 1 #"/"
0 0 22 3 1 #" "
0 0 14 3 11 #"sample-rate"
0 0 22 3 1 #" "
0 0 14 3 5 #"pitch"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 9 #"log-debug"
0 0 22 3 2 #" ("
0 0 14 3 6 #"format"
0 0 22 3 1 #" "
0 0 19 3 21 #"\"generated ~s frames\""
0 0 22 3 1 #" "
0 0 14 3 16 #"generated-frames"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 4 #"core"
0 0 22 3 2 #" ("
0 0 14 3 14 #"signal->rsound"
0 0 22 3 1 #" "
0 0 14 3 16 #"generated-frames"
0 0 22 29 1 #"\n"
0 0 22 3 43 #"                                          ("
0 0 14 3 7 #"wavefun"
0 0 22 3 1 #" "
0 0 14 3 5 #"pitch"
0 0 22 3 1 #" "
0 0 14 3 6 #"volume"
0 0 22 3 1 #" "
0 0 14 3 11 #"sample-rate"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 3 #"snd"
0 0 22 3 2 #" ("
0 0 14 3 11 #"tile-to-len"
0 0 22 3 1 #" "
0 0 14 3 4 #"core"
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 15 3 4 #"when"
0 0 22 3 2 #" ("
0 0 14 3 1 #"<"
0 0 22 3 1 #" "
0 0 14 3 16 #"generated-frames"
0 0 22 3 1 #" "
0 0 14 3 17 #"too-long-to-cache"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 9 #"hash-set!"
0 0 22 3 1 #" "
0 0 14 3 10 #"tone-table"
0 0 22 3 1 #" "
0 0 14 3 3 #"key"
0 0 22 3 1 #" "
0 0 14 3 3 #"snd"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 14 3 3 #"snd"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 5 #"match"
0 0 22 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 22 3 1 #" "
0 0 14 3 10 #"tone-table"
0 0 22 3 1 #" "
0 0 14 3 3 #"key"
0 0 22 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 17 3 3 #";; "
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ["
0 0 20 3 2 #"#f"
0 0 22 3 2 #" ("
0 0 14 3 17 #"compute-and-store"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        [("
0 0 14 3 3 #"and"
0 0 22 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 2 #" ("
0 0 15 3 6 #"struct"
0 0 22 3 1 #" "
0 0 14 3 6 #"rsound"
0 0 22 3 2 #" ("
0 0 14 3 4 #"data"
0 0 22 3 1 #" "
0 0 14 3 5 #"start"
0 0 22 3 1 #" "
0 0 14 3 4 #"stop"
0 0 22 3 1 #" "
0 0 14 3 11 #"sample-rate"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" ()"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 13 #"stored-frames"
0 0 22 3 2 #" ("
0 0 14 3 9 #"rs-frames"
0 0 22 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 15 3 4 #"cond"
0 0 22 3 3 #" [("
0 0 14 3 1 #"="
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 1 #" "
0 0 14 3 13 #"stored-frames"
0 0 22 3 2 #") "
0 0 14 3 1 #"s"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                 [("
0 0 14 3 1 #"<"
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 1 #" "
0 0 14 3 13 #"stored-frames"
0 0 22 3 3 #") ("
0 0 14 3 4 #"clip"
0 0 22 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ["
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 17 #"compute-and-store"
0 0 22 3 9 #")]))]))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 17 #"too-long-to-cache"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 20 3 5 #"44100"
0 0 22 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 70
(
 #";; we want to re-use the wavefun->tone-maker for the fader. It doesn"
 #"'t"
) 0 0 22 29 1 #"\n"
0 0 17 3 57 #";; have the right parameters, so we just re-purpose them."
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 16 #"fader-as-wavefun"
0 0 22 3 1 #" "
0 0 14 3 11 #"fade-frames"
0 0 22 3 1 #" "
0 0 14 3 3 #"dc1"
0 0 22 3 1 #" "
0 0 14 3 3 #"dc2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (["
0 0 14 3 1 #"p"
0 0 22 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 22 3 1 #" "
0 0 20 3 5 #"0.001"
0 0 22 3 2 #" ("
0 0 14 3 1 #"/"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 14 3 11 #"fade-frames"
0 0 22 3 4 #"))])"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"expt"
0 0 22 3 1 #" "
0 0 14 3 1 #"p"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 11 #"fader-proxy"
0 0 22 3 2 #" ("
0 0 14 3 19 #"wavefun->tone-maker"
0 0 22 3 1 #" "
0 0 14 3 16 #"fader-as-wavefun"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 9 #"fader-snd"
0 0 22 3 1 #" "
0 0 14 3 11 #"fade-frames"
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 11 #"fader-proxy"
0 0 22 3 1 #" "
0 0 14 3 11 #"fade-frames"
0 0 22 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 70
(
 #";; generate a sound containing repeated copies of the sound out to t"
 #"he"
) 0 0 22 29 1 #"\n"
0 0 17 3 25 #";; given number of frames"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 11 #"tile-to-len"
0 0 22 3 1 #" "
0 0 14 3 3 #"snd"
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 6 #"copies"
0 0 22 3 2 #" ("
0 0 14 3 1 #"/"
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 2 #" ("
0 0 14 3 9 #"rs-frames"
0 0 22 3 1 #" "
0 0 14 3 3 #"snd"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 15 #"integral-copies"
0 0 22 3 2 #" ("
0 0 14 3 5 #"floor"
0 0 22 3 1 #" "
0 0 14 3 6 #"copies"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 15 #"leftover-frames"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 2 #" ("
0 0 14 3 9 #"rs-frames"
0 0 22 3 1 #" "
0 0 14 3 3 #"snd"
0 0 22 3 2 #") "
0 0 14 3 15 #"integral-copies"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 10 #"rs-append*"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 6 #"append"
0 0 22 3 2 #" ("
0 0 15 3 8 #"for/list"
0 0 22 3 3 #" (["
0 0 14 3 1 #"i"
0 0 22 3 2 #" ("
0 0 14 3 8 #"in-range"
0 0 22 3 1 #" "
0 0 14 3 15 #"integral-copies"
0 0 22 3 4 #")]) "
0 0 14 3 3 #"snd"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 4 #"clip"
0 0 22 3 1 #" "
0 0 14 3 3 #"snd"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #" "
0 0 14 3 15 #"leftover-frames"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 22 #"make-harm3tone/unfaded"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 28 #"wavefun->tone-maker/periodic"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 5 #"pitch"
0 0 22 3 1 #" "
0 0 14 3 6 #"volume"
0 0 22 3 1 #" "
0 0 14 3 11 #"sample-rate"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 9 #"sig-scale"
0 0 22 3 1 #" "
0 0 14 3 6 #"volume"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 10 #"harm3-wave"
0 0 22 3 1 #" "
0 0 14 3 5 #"pitch"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 24 #";; a memoized harm3 tone"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 14 #"make-harm3tone"
0 0 22 3 1 #" "
0 0 14 3 5 #"pitch"
0 0 22 3 1 #" "
0 0 14 3 6 #"volume"
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 7 #"rs-mult"
0 0 22 3 2 #" ("
0 0 14 3 9 #"fader-snd"
0 0 22 3 1 #" "
0 0 20 3 5 #"88200"
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 22 #"make-harm3tone/unfaded"
0 0 22 3 1 #" "
0 0 14 3 5 #"pitch"
0 0 22 3 1 #" "
0 0 14 3 6 #"volume"
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 56 #";; make a monaural pitch with the given number of frames"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 9 #"make-tone"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 28 #"wavefun->tone-maker/periodic"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 5 #"pitch"
0 0 22 3 1 #" "
0 0 14 3 6 #"volume"
0 0 22 3 1 #" "
0 0 14 3 11 #"sample-rate"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 9 #"sig-scale"
0 0 22 3 1 #" "
0 0 14 3 6 #"volume"
0 0 22 3 2 #" ("
0 0 14 3 9 #"sine-wave"
0 0 22 3 1 #" "
0 0 14 3 5 #"pitch"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 15 #"make-squaretone"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 28 #"wavefun->tone-maker/periodic"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 5 #"pitch"
0 0 22 3 1 #" "
0 0 14 3 6 #"volume"
0 0 22 3 1 #" "
0 0 14 3 11 #"sample-rate"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 9 #"sig-scale"
0 0 22 3 1 #" "
0 0 14 3 6 #"volume"
0 0 22 3 2 #" ("
0 0 14 3 11 #"square-wave"
0 0 22 3 1 #" "
0 0 14 3 5 #"pitch"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 21 #"make-square-fade-tone"
0 0 22 3 1 #" "
0 0 14 3 5 #"pitch"
0 0 22 3 1 #" "
0 0 14 3 6 #"volume"
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 7 #"rs-mult"
0 0 22 3 2 #" ("
0 0 14 3 9 #"fader-snd"
0 0 22 3 1 #" "
0 0 20 3 5 #"88200"
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 15 #"make-squaretone"
0 0 22 3 1 #" "
0 0 14 3 5 #"pitch"
0 0 22 3 1 #" "
0 0 14 3 6 #"volume"
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 12 #"make-zugtone"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 19 #"wavefun->tone-maker"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 5 #"pitch"
0 0 22 3 1 #" "
0 0 14 3 6 #"volume"
0 0 22 3 1 #" "
0 0 14 3 11 #"sample-rate"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 9 #"sig-scale"
0 0 22 3 1 #" "
0 0 14 3 6 #"volume"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 9 #"signal-*s"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 13 #"frisellinator"
0 0 22 3 1 #" "
0 0 20 3 4 #"8820"
0 0 22 3 2 #") "
0 0 17 3 2 #"#;"
0 0 22 3 1 #"("
0 0 14 3 5 #"fader"
0 0 22 3 1 #" "
0 0 20 3 5 #"88200"
0 0 22 3 3 #") ("
0 0 14 3 20 #"approx-sawtooth-wave"
0 0 22 3 1 #" "
0 0 14 3 5 #"pitch"
0 0 22 3 7 #")))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 18 #"make-sawtooth-tone"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 28 #"wavefun->tone-maker/periodic"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 5 #"pitch"
0 0 22 3 1 #" "
0 0 14 3 6 #"volume"
0 0 22 3 1 #" "
0 0 14 3 11 #"sample-rate"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 9 #"sig-scale"
0 0 22 3 1 #" "
0 0 14 3 6 #"volume"
0 0 22 3 2 #" ("
0 0 14 3 13 #"sawtooth-wave"
0 0 22 3 1 #" "
0 0 14 3 5 #"pitch"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 23 #"make-sawtooth-fade-tone"
0 0 22 3 1 #" "
0 0 14 3 5 #"pitch"
0 0 22 3 1 #" "
0 0 14 3 6 #"volume"
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 7 #"rs-mult"
0 0 22 3 2 #" ("
0 0 14 3 9 #"fader-snd"
0 0 22 3 1 #" "
0 0 20 3 5 #"88200"
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 18 #"make-sawtooth-tone"
0 0 22 3 1 #" "
0 0 14 3 5 #"pitch"
0 0 22 3 1 #" "
0 0 14 3 6 #"volume"
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 15 #"make-pulse-tone"
0 0 22 3 1 #" "
0 0 14 3 10 #"duty-cycle"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 4 #"when"
0 0 22 3 2 #" ("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 1 #"<"
0 0 22 3 1 #" "
0 0 20 3 3 #"0.0"
0 0 22 3 1 #" "
0 0 14 3 10 #"duty-cycle"
0 0 22 3 1 #" "
0 0 20 3 3 #"1.0"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 16 #"raise-type-error"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 15 #"make-pulse-tone"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                      "
0 0 19 3 24 #"\"number between 0 and 1\""
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                      "
0 0 20 3 1 #"0"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                      "
0 0 14 3 10 #"duty-cycle"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 28 #"wavefun->tone-maker/periodic"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 5 #"pitch"
0 0 22 3 1 #" "
0 0 14 3 6 #"volume"
0 0 22 3 1 #" "
0 0 14 3 11 #"sample-rate"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 10 #"wavelength"
0 0 22 3 2 #" ("
0 0 14 3 1 #"/"
0 0 22 3 1 #" "
0 0 14 3 11 #"sample-rate"
0 0 22 3 1 #" "
0 0 14 3 5 #"pitch"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 10 #"on-samples"
0 0 22 3 2 #" ("
0 0 14 3 5 #"round"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 10 #"duty-cycle"
0 0 22 3 1 #" "
0 0 14 3 10 #"wavelength"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 13 #"total-samples"
0 0 22 3 2 #" ("
0 0 14 3 5 #"round"
0 0 22 3 1 #" "
0 0 14 3 10 #"wavelength"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 2 #"up"
0 0 22 3 1 #" "
0 0 14 3 6 #"volume"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 4 #"down"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 2 #"up"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 22 3 3 #" [("
0 0 14 3 1 #"<"
0 0 22 3 2 #" ("
0 0 14 3 6 #"modulo"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #" "
0 0 14 3 13 #"total-samples"
0 0 22 3 2 #") "
0 0 14 3 10 #"on-samples"
0 0 22 3 2 #") "
0 0 14 3 2 #"up"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ["
0 0 14 3 4 #"else"
0 0 22 3 1 #" "
0 0 14 3 4 #"down"
0 0 22 3 6 #"])))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 9 #"make-ding"
0 0 22 3 1 #" "
0 0 14 3 5 #"pitch"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 11 #"sample-rate"
0 0 22 3 2 #" ("
0 0 15 3 19 #"default-sample-rate"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 14 #"signal->rsound"
0 0 22 3 1 #" "
0 0 14 3 11 #"sample-rate"
0 0 22 29 1 #"\n"
0 0 22 3 24 #"                       ("
0 0 14 3 9 #"signal-*s"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 9 #"sine-wave"
0 0 22 3 1 #" "
0 0 14 3 5 #"pitch"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 41 #"                                        ("
0 0 14 3 9 #"dc-signal"
0 0 22 3 1 #" "
0 0 20 3 4 #"0.35"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 41 #"                                        ("
0 0 14 3 5 #"fader"
0 0 22 3 1 #" "
0 0 14 3 11 #"sample-rate"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 24 #";; sounds like a ding..."
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 4 #"ding"
0 0 22 3 2 #" ("
0 0 14 3 9 #"make-ding"
0 0 22 3 1 #" "
0 0 20 3 3 #"600"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 10 #"split-in-4"
0 0 22 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (["
0 0 14 3 3 #"len"
0 0 22 3 2 #" ("
0 0 14 3 5 #"floor"
0 0 22 3 2 #" ("
0 0 14 3 1 #"/"
0 0 22 3 2 #" ("
0 0 14 3 9 #"rs-frames"
0 0 22 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 2 #") "
0 0 20 3 1 #"4"
0 0 22 3 4 #"))])"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 5 #"apply"
0 0 22 3 1 #" "
0 0 14 3 6 #"values"
0 0 22 3 2 #" ("
0 0 15 3 8 #"for/list"
0 0 22 3 3 #" (["
0 0 14 3 1 #"i"
0 0 22 3 2 #" ("
0 0 14 3 8 #"in-range"
0 0 22 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ("
0 0 14 3 4 #"clip"
0 0 22 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #" "
0 0 14 3 3 #"len"
0 0 22 3 3 #") ("
0 0 14 3 1 #"*"
0 0 22 3 2 #" ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 2 #") "
0 0 14 3 3 #"len"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 25 #";; play a sound 'n' times"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 5 #"times"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 10 #"rs-append*"
0 0 22 3 2 #" ("
0 0 14 3 10 #"build-list"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 2 #") "
0 0 14 3 1 #"s"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 74
(
 #";; put vectors together into an rsound at the default sample-rate. I"
 #"gnores"
) 0 0 22 29 1 #"\n"
0 0 17 3 34 #";; the complex component entirely."
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 15 #"vectors->rsound"
0 0 22 3 1 #" "
0 0 14 3 7 #"leftvec"
0 0 22 3 1 #" "
0 0 14 3 8 #"rightvec"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 11 #"sample-rate"
0 0 22 3 2 #" ("
0 0 15 3 19 #"default-sample-rate"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"unless"
0 0 22 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 22 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 22 3 1 #" "
0 0 14 3 7 #"leftvec"
0 0 22 3 3 #") ("
0 0 14 3 13 #"vector-length"
0 0 22 3 1 #" "
0 0 14 3 8 #"rightvec"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 15 #"vectors->rsound"
0 0 22 3 1 #" "
0 0 19 3 71
(
 #"\"expected vectors of equal length, given vectors of lengths ~v and "
 #"~v.\""
) 0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 13 #"vector-length"
0 0 22 3 1 #" "
0 0 14 3 7 #"leftvec"
0 0 22 3 3 #") ("
0 0 14 3 13 #"vector-length"
0 0 22 3 1 #" "
0 0 14 3 8 #"rightvec"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 22 3 3 #" (["
0 0 14 3 3 #"len"
0 0 22 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 22 3 1 #" "
0 0 14 3 7 #"leftvec"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ["
0 0 14 3 7 #"datamax"
0 0 22 3 2 #" ("
0 0 15 3 8 #"for/fold"
0 0 22 3 3 #" (("
0 0 14 3 7 #"max-abs"
0 0 22 3 1 #" "
0 0 20 3 3 #"0.0"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                    (("
0 0 14 3 1 #"x"
0 0 22 3 2 #" ("
0 0 14 3 9 #"in-vector"
0 0 22 3 1 #" "
0 0 14 3 7 #"leftvec"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ["
0 0 14 3 1 #"y"
0 0 22 3 2 #" ("
0 0 14 3 9 #"in-vector"
0 0 22 3 1 #" "
0 0 14 3 8 #"rightvec"
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ("
0 0 14 3 3 #"max"
0 0 22 3 2 #" ("
0 0 14 3 3 #"abs"
0 0 22 3 2 #" ("
0 0 14 3 9 #"real-part"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 3 #")) "
0 0 22 29 1 #"\n"
0 0 22 3 26 #"                         ("
0 0 14 3 3 #"abs"
0 0 22 3 2 #" ("
0 0 14 3 9 #"real-part"
0 0 22 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 25 #"                         "
0 0 14 3 7 #"max-abs"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ["
0 0 14 3 6 #"newvec"
0 0 22 3 2 #" ("
0 0 14 3 14 #"make-s16vector"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 14 3 3 #"len"
0 0 22 3 3 #"))]"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ["
0 0 14 3 7 #"scaling"
0 0 22 3 2 #" ("
0 0 14 3 1 #"/"
0 0 22 3 1 #" "
0 0 14 3 6 #"s16max"
0 0 22 3 1 #" "
0 0 14 3 7 #"datamax"
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 3 #"for"
0 0 22 3 3 #" (["
0 0 14 3 1 #"i"
0 0 22 3 2 #" ("
0 0 14 3 8 #"in-range"
0 0 22 3 1 #" "
0 0 14 3 3 #"len"
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 14 #"s16vector-set!"
0 0 22 3 1 #" "
0 0 14 3 6 #"newvec"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 10 #")        ("
0 0 14 3 14 #"inexact->exact"
0 0 22 3 2 #" ("
0 0 14 3 5 #"round"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 7 #"scaling"
0 0 22 3 2 #" ("
0 0 14 3 9 #"real-part"
0 0 22 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 22 3 1 #" "
0 0 14 3 7 #"leftvec"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 14 #"s16vector-set!"
0 0 22 3 1 #" "
0 0 14 3 6 #"newvec"
0 0 22 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 4 #")) ("
0 0 14 3 14 #"inexact->exact"
0 0 22 3 2 #" ("
0 0 14 3 5 #"round"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 7 #"scaling"
0 0 22 3 2 #" ("
0 0 14 3 9 #"real-part"
0 0 22 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 22 3 1 #" "
0 0 14 3 8 #"rightvec"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 7 #")))))))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 6 #"rsound"
0 0 22 3 1 #" "
0 0 14 3 6 #"newvec"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #" "
0 0 14 3 3 #"len"
0 0 22 3 1 #" "
0 0 14 3 11 #"sample-rate"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 51 #";; ADSR envelope (actually more of an ADS envelope)"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 4 #"adsr"
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 1 #" "
0 0 14 3 10 #"attack-len"
0 0 22 3 1 #" "
0 0 14 3 13 #"attack-height"
0 0 22 3 1 #" "
0 0 14 3 9 #"decay-len"
0 0 22 3 1 #" "
0 0 14 3 12 #"decay-height"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 22 3 3 #" (["
0 0 14 3 2 #"t1"
0 0 22 3 1 #" "
0 0 14 3 10 #"attack-len"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ["
0 0 14 3 2 #"t2"
0 0 22 3 2 #" ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 2 #"t1"
0 0 22 3 1 #" "
0 0 14 3 9 #"decay-len"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ["
0 0 14 3 2 #"t3"
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 2 #"])"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 22 3 3 #" [("
0 0 14 3 1 #"<"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #" "
0 0 14 3 2 #"t1"
0 0 22 3 3 #") ("
0 0 14 3 8 #"weighted"
0 0 22 3 2 #" ("
0 0 14 3 1 #"/"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #" "
0 0 14 3 10 #"attack-len"
0 0 22 3 2 #") "
0 0 20 3 1 #"0"
0 0 22 3 1 #" "
0 0 14 3 13 #"attack-height"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"          [("
0 0 14 3 1 #"<"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 3 #") ("
0 0 14 3 8 #"weighted"
0 0 22 3 2 #" ("
0 0 14 3 1 #"/"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #" "
0 0 14 3 2 #"t1"
0 0 22 3 2 #") "
0 0 14 3 9 #"decay-len"
0 0 22 3 2 #") "
0 0 14 3 13 #"attack-height"
0 0 22 3 1 #" "
0 0 14 3 12 #"decay-height"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"          [("
0 0 14 3 1 #"<"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #" "
0 0 14 3 2 #"t3"
0 0 22 3 2 #") "
0 0 14 3 12 #"decay-height"
0 0 22 3 1 #"]"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 5 #"]))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 16 #";; (1-s)*a + s*b"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 8 #"weighted"
0 0 22 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 1 #"+"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 4 #")) ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 66
#";; turn a function of multiple arguments into a signal. Basically,"
0 0 22 29 1 #"\n"
0 0 17 3 40 #";; just curry w.r.t. the first argument."
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 6 #"signal"
0 0 22 3 1 #" "
0 0 14 3 1 #"f"
0 0 22 3 1 #" "
0 0 26 3 1 #"."
0 0 22 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"t"
0 0 22 3 3 #") ("
0 0 14 3 5 #"apply"
0 0 22 3 1 #" "
0 0 14 3 1 #"f"
0 0 22 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 22 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 7 #";; FFTs"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 70
(
 #";; binary-logn; a safe version of the one that appears in the fft co"
 #"de"
) 0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 11 #"binary-logn"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 11 #"binary-logn"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 22 3 1 #" "
0 0 14 3 4 #"loop"
0 0 22 3 3 #" (("
0 0 14 3 1 #"k"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ("
0 0 14 3 1 #"l"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 2 #">="
0 0 22 3 1 #" "
0 0 14 3 1 #"k"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"               "
0 0 14 3 1 #"l"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 4 #"loop"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 1 #"k"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 3 #") ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 1 #"="
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 2 #" ("
0 0 14 3 16 #"arithmetic-shift"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #" "
0 0 14 3 11 #"binary-logn"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 14 3 11 #"binary-logn"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 20 3 2 #"#f"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 47 #";; return the (complex) fft of the left channel"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 15 #"rsound-fft/left"
0 0 22 3 1 #" "
0 0 14 3 6 #"rsound"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 11 #"channel-fft"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"i"
0 0 22 3 3 #") ("
0 0 14 3 15 #"rs-ith/left/s16"
0 0 22 3 1 #" "
0 0 14 3 6 #"rsound"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 4 #")) ("
0 0 14 3 9 #"rs-frames"
0 0 22 3 1 #" "
0 0 14 3 6 #"rsound"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 48 #";; return the (complex) fft of the right channel"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 16 #"rsound-fft/right"
0 0 22 3 1 #" "
0 0 14 3 6 #"rsound"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 11 #"channel-fft"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"i"
0 0 22 3 3 #") ("
0 0 14 3 16 #"rs-ith/right/s16"
0 0 22 3 1 #" "
0 0 14 3 6 #"rsound"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 4 #")) ("
0 0 14 3 9 #"rs-frames"
0 0 22 3 1 #" "
0 0 14 3 6 #"rsound"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 36 #";; the common left-right abstraction"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 11 #"channel-fft"
0 0 22 3 1 #" "
0 0 14 3 8 #"accessor"
0 0 22 3 1 #" "
0 0 14 3 3 #"len"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 22 3 3 #" (["
0 0 14 3 1 #"v"
0 0 22 3 2 #" ("
0 0 14 3 12 #"build-vector"
0 0 22 3 1 #" "
0 0 14 3 3 #"len"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 27 #"                          ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"i"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 29 #"                            ("
0 0 14 3 1 #"/"
0 0 22 3 2 #" ("
0 0 14 3 14 #"exact->inexact"
0 0 22 3 2 #" ("
0 0 14 3 8 #"accessor"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 3 #")) "
0 0 14 3 6 #"s16max"
0 0 22 3 5 #")))])"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 11 #"binary-logn"
0 0 22 3 1 #" "
0 0 14 3 3 #"len"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 26 #"fft-complex-radix2-forward"
0 0 22 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 19 #"fft-complex-forward"
0 0 22 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 3 3 #")) "
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 14 3 1 #"v"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 57 #";; make the sound as lound as possible without distortion"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 17 #"rsound-max-volume"
0 0 22 3 1 #" "
0 0 14 3 6 #"rsound"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 22 3 3 #" (["
0 0 14 3 6 #"scalar"
0 0 22 3 2 #" ("
0 0 14 3 3 #"fl/"
0 0 22 3 1 #" "
0 0 20 3 3 #"1.0"
0 0 22 3 2 #" ("
0 0 14 3 14 #"exact->inexact"
0 0 22 3 2 #" ("
0 0 14 3 17 #"rs-largest-sample"
0 0 22 3 1 #" "
0 0 14 3 6 #"rsound"
0 0 22 3 5 #")))])"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 15 #"signals->rsound"
0 0 22 3 2 #" ("
0 0 14 3 9 #"rs-frames"
0 0 22 3 1 #" "
0 0 14 3 6 #"rsound"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ("
0 0 14 3 18 #"rsound-sample-rate"
0 0 22 3 1 #" "
0 0 14 3 6 #"rsound"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"i"
0 0 22 3 3 #") ("
0 0 14 3 3 #"fl*"
0 0 22 3 1 #" "
0 0 14 3 6 #"scalar"
0 0 22 3 2 #" ("
0 0 14 3 14 #"exact->inexact"
0 0 22 3 2 #" ("
0 0 14 3 15 #"rs-ith/left/s16"
0 0 22 3 1 #" "
0 0 14 3 6 #"rsound"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 22 #"                     ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"i"
0 0 22 3 3 #") ("
0 0 14 3 3 #"fl*"
0 0 22 3 1 #" "
0 0 14 3 6 #"scalar"
0 0 22 3 2 #" ("
0 0 14 3 14 #"exact->inexact"
0 0 22 3 2 #" ("
0 0 14 3 16 #"rs-ith/right/s16"
0 0 22 3 1 #" "
0 0 14 3 6 #"rsound"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 7 #")))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 42 #";; midi-note-num->pitch : number -> number"
0 0 22 29 1 #"\n"
0 0 17 3 60
#";; produces the pitch that corresponds to a midi note number"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 20 #"midi-note-num->pitch"
0 0 22 3 1 #" "
0 0 14 3 8 #"note-num"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"unless"
0 0 22 3 2 #" ("
0 0 14 3 5 #"real?"
0 0 22 3 1 #" "
0 0 14 3 8 #"note-num"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 16 #"raise-type-error"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 20 #"midi-note-num->pitch"
0 0 22 3 1 #" "
0 0 19 3 6 #"\"real\""
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #" "
0 0 14 3 8 #"note-num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 20 3 3 #"440"
0 0 22 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 2 #" ("
0 0 14 3 1 #"/"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 8 #"note-num"
0 0 22 3 1 #" "
0 0 20 3 2 #"69"
0 0 22 3 2 #") "
0 0 20 3 2 #"12"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 72
(
 #";; rsound->signal/either : (rsound number -> number) -> rsound -> si"
 #"gnal"
) 0 0 22 29 1 #"\n"
0 0 17 3 75
(
 #";; an abstraction over left/right channels for the following two fun"
 #"ctions."
) 0 0 22 29 1 #"\n"
0 0 17 3 47 #";; it has to appear before them, unfortunately."
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 3 #" (("
0 0 14 3 21 #"rsound->signal/either"
0 0 22 3 1 #" "
0 0 14 3 7 #"ith-fun"
0 0 22 3 2 #") "
0 0 14 3 6 #"rsound"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"unless"
0 0 22 3 2 #" ("
0 0 14 3 7 #"rsound?"
0 0 22 3 1 #" "
0 0 14 3 6 #"rsound"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 16 #"raise-type-error"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 14 #"rsound->signal"
0 0 22 3 1 #" "
0 0 19 3 8 #"\"rsound\""
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #" "
0 0 14 3 6 #"rsound"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (["
0 0 14 3 3 #"len"
0 0 22 3 2 #" ("
0 0 14 3 9 #"rs-frames"
0 0 22 3 1 #" "
0 0 14 3 6 #"rsound"
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"t"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 22 3 3 #" [("
0 0 14 3 1 #"<"
0 0 22 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 1 #" "
0 0 14 3 3 #"len"
0 0 22 3 3 #") ("
0 0 14 3 7 #"ith-fun"
0 0 22 3 1 #" "
0 0 14 3 6 #"rsound"
0 0 22 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 22 3 1 #" "
0 0 20 3 3 #"0.0"
0 0 22 3 5 #"]))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 41 #";; rsound->signal/left : rsound -> signal"
0 0 22 29 1 #"\n"
0 0 17 3 89
(
 #";; produce the signal that corresponds to the rsound's left channel,"
 #" followed by silence."
) 0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 19 #"rsound->signal/left"
0 0 22 3 2 #" ("
0 0 14 3 21 #"rsound->signal/either"
0 0 22 3 1 #" "
0 0 14 3 11 #"rs-ith/left"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 42 #";; rsound->signal/right : rsound -> signal"
0 0 22 29 1 #"\n"
0 0 17 3 90
(
 #";; produce the signal that corresponds to the rsound's right channel"
 #", followed by silence."
) 0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 20 #"rsound->signal/right"
0 0 22 3 2 #" ("
0 0 14 3 21 #"rsound->signal/either"
0 0 22 3 1 #" "
0 0 14 3 12 #"rs-ith/right"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 35 #";; thresh : number number -> number"
0 0 22 29 1 #"\n"
0 0 17 3 22 #";; clip to a threshold"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 6 #"thresh"
0 0 22 3 1 #" "
0 0 14 3 9 #"threshold"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (["
0 0 14 3 10 #"abs-thresh"
0 0 22 3 2 #" ("
0 0 14 3 3 #"abs"
0 0 22 3 1 #" "
0 0 14 3 9 #"threshold"
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 3 #"max"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 10 #"abs-thresh"
0 0 22 3 3 #") ("
0 0 14 3 3 #"min"
0 0 22 3 1 #" "
0 0 14 3 10 #"abs-thresh"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 42 #";; thresh/signal : number signal -> signal"
0 0 22 29 1 #"\n"
0 0 17 3 42 #";; clip to a threshold (lifted to signals)"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 13 #"thresh/signal"
0 0 22 3 1 #" "
0 0 14 3 9 #"threshold"
0 0 22 3 1 #" "
0 0 14 3 6 #"signal"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 22 3 3 #" (["
0 0 14 3 10 #"abs-thresh"
0 0 22 3 2 #" ("
0 0 14 3 3 #"abs"
0 0 22 3 1 #" "
0 0 14 3 9 #"threshold"
0 0 22 3 2 #")]"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ["
0 0 14 3 14 #"neg-abs-thresh"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 10 #"abs-thresh"
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"t"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 3 #"max"
0 0 22 3 1 #" "
0 0 14 3 14 #"neg-abs-thresh"
0 0 22 3 2 #" ("
0 0 14 3 3 #"min"
0 0 22 3 1 #" "
0 0 14 3 10 #"abs-thresh"
0 0 22 3 2 #" ("
0 0 14 3 6 #"signal"
0 0 22 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 34 #";; scale : number signal -> signal"
0 0 22 29 1 #"\n"
0 0 17 3 39 #";; scale the signal by the given number"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 12 #"signal-scale"
0 0 22 3 1 #" "
0 0 14 3 6 #"volume"
0 0 22 3 1 #" "
0 0 14 3 6 #"signal"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"t"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 6 #"volume"
0 0 22 3 2 #" ("
0 0 14 3 6 #"signal"
0 0 22 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 40 #";; clip&volume : number signal -> signal"
0 0 22 29 1 #"\n"
0 0 17 3 61
#";; clip the given signal to 1.0, then multiply by the volume."
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 11 #"clip&volume"
0 0 22 3 1 #" "
0 0 14 3 6 #"volume"
0 0 22 3 1 #" "
0 0 14 3 6 #"signal"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 12 #"signal-scale"
0 0 22 3 1 #" "
0 0 14 3 6 #"volume"
0 0 22 3 2 #" ("
0 0 14 3 13 #"thresh/signal"
0 0 22 3 1 #" "
0 0 20 3 3 #"1.0"
0 0 22 3 1 #" "
0 0 14 3 6 #"signal"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 48 #";; overlay a list of sounds on top of each other"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 11 #"rs-overlay*"
0 0 22 3 1 #" "
0 0 14 3 3 #"los"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 8 #"assemble"
0 0 22 3 2 #" ("
0 0 14 3 3 #"map"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"s"
0 0 22 3 3 #") ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")) "
0 0 14 3 3 #"los"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 42 #";; overlay two sounds on top of each other"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 10 #"rs-overlay"
0 0 22 3 1 #" "
0 0 14 3 6 #"sound1"
0 0 22 3 1 #" "
0 0 14 3 6 #"sound2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 8 #"assemble"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 2 #" ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 14 3 6 #"sound1"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 22 3 1 #" "
0 0 14 3 6 #"sound2"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 43 #";; a wrapper to simplify specifying sounds."
0 0 22 29 1 #"\n"
0 0 17 3 50 #";; e.g.: (mono 30 t (sin (* t 300 twopi 1/44100)))"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 13 #"define-syntax"
0 0 22 3 2 #" ("
0 0 14 3 4 #"mono"
0 0 22 3 1 #" "
0 0 14 3 3 #"stx"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 12 #"syntax-parse"
0 0 22 3 1 #" "
0 0 14 3 3 #"stx"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    [("
0 0 14 3 1 #"_"
0 0 22 3 1 #" "
0 0 14 3 11 #"frames:expr"
0 0 22 3 1 #" "
0 0 14 3 10 #"timevar:id"
0 0 22 3 1 #" "
0 0 14 3 9 #"body:expr"
0 0 22 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"     "
0 0 20 3 2 #"#'"
0 0 22 3 1 #"("
0 0 14 3 14 #"signal->rsound"
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 29 #"                            ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 7 #"timevar"
0 0 22 3 2 #") "
0 0 14 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 3 #"..."
0 0 22 3 5 #"))]))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 8 #";; noise"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 5 #"noise"
0 0 22 3 1 #" "
0 0 14 3 8 #"duration"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 7 #"samples"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 8 #"duration"
0 0 22 3 1 #" "
0 0 14 3 8 #"channels"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 3 #"vec"
0 0 22 3 2 #" ("
0 0 14 3 14 #"make-s16vector"
0 0 22 3 1 #" "
0 0 14 3 7 #"samples"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 3 #"for"
0 0 22 3 3 #" (["
0 0 14 3 1 #"i"
0 0 22 3 2 #" ("
0 0 14 3 8 #"in-range"
0 0 22 3 1 #" "
0 0 14 3 7 #"samples"
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 14 #"s16vector-set!"
0 0 22 3 1 #" "
0 0 14 3 3 #"vec"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 2 #" ("
0 0 14 3 1 #"-"
0 0 22 3 2 #" ("
0 0 14 3 6 #"random"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #" "
0 0 14 3 6 #"s16max"
0 0 22 3 3 #")) "
0 0 14 3 6 #"s16max"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 6 #"rsound"
0 0 22 3 1 #" "
0 0 14 3 3 #"vec"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #" "
0 0 14 3 8 #"duration"
0 0 22 3 2 #" ("
0 0 15 3 19 #"default-sample-rate"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 12 #";; rearrange"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 9 #"rearrange"
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 1 #" "
0 0 14 3 3 #"fun"
0 0 22 3 1 #" "
0 0 14 3 4 #"orig"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 7 #"samples"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 1 #" "
0 0 14 3 8 #"channels"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 3 #"vec"
0 0 22 3 2 #" ("
0 0 14 3 14 #"make-s16vector"
0 0 22 3 1 #" "
0 0 14 3 7 #"samples"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 3 #"for"
0 0 22 3 3 #" (["
0 0 14 3 1 #"i"
0 0 22 3 2 #" ("
0 0 14 3 8 #"in-range"
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 6 #"source"
0 0 22 3 2 #" ("
0 0 14 3 3 #"fun"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 14 #"s16vector-set!"
0 0 22 3 1 #" "
0 0 14 3 3 #"vec"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 8 #"channels"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ("
0 0 14 3 15 #"rs-ith/left/s16"
0 0 22 3 1 #" "
0 0 14 3 4 #"orig"
0 0 22 3 1 #" "
0 0 14 3 6 #"source"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 14 #"s16vector-set!"
0 0 22 3 1 #" "
0 0 14 3 3 #"vec"
0 0 22 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 8 #"channels"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 3 #")) "
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ("
0 0 14 3 16 #"rs-ith/right/s16"
0 0 22 3 1 #" "
0 0 14 3 4 #"orig"
0 0 22 3 1 #" "
0 0 14 3 6 #"source"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 6 #"rsound"
0 0 22 3 1 #" "
0 0 14 3 3 #"vec"
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 2 #" ("
0 0 15 3 19 #"default-sample-rate"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 3 #"i2e"
0 0 22 3 1 #" "
0 0 14 3 14 #"inexact->exact"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 83
(
 #";; this stuff is a bit of a mess... the frames don't need to be pass"
 #"ed around, the "
) 0 0 22 29 1 #"\n"
0 0 17 3 35 #";; whole thing is just a bit wordy."
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 17 #"rs-largest-sample"
0 0 22 3 1 #" "
0 0 14 3 5 #"sound"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 27 #"buffer-largest-sample/range"
0 0 22 3 2 #" ("
0 0 14 3 11 #"rsound-data"
0 0 22 3 1 #" "
0 0 14 3 5 #"sound"
0 0 22 3 3 #") ("
0 0 14 3 12 #"rsound-start"
0 0 22 3 1 #" "
0 0 14 3 5 #"sound"
0 0 22 3 3 #") ("
0 0 14 3 11 #"rsound-stop"
0 0 22 3 1 #" "
0 0 14 3 5 #"sound"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 32 #"                               ("
0 0 14 3 9 #"rs-frames"
0 0 22 3 1 #" "
0 0 14 3 5 #"sound"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 27 #"rs-largest-frame/range/left"
0 0 22 3 1 #" "
0 0 14 3 5 #"sound"
0 0 22 3 1 #" "
0 0 14 3 9 #"min-frame"
0 0 22 3 1 #" "
0 0 14 3 9 #"max-frame"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 32 #"buffer-largest-sample/range/left"
0 0 22 3 2 #" ("
0 0 14 3 11 #"rsound-data"
0 0 22 3 1 #" "
0 0 14 3 5 #"sound"
0 0 22 3 3 #") ("
0 0 14 3 9 #"rs-frames"
0 0 22 3 1 #" "
0 0 14 3 5 #"sound"
0 0 22 3 2 #") "
0 0 14 3 9 #"min-frame"
0 0 22 3 1 #" "
0 0 14 3 9 #"max-frame"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 28 #"rs-largest-frame/range/right"
0 0 22 3 1 #" "
0 0 14 3 5 #"sound"
0 0 22 3 1 #" "
0 0 14 3 9 #"min-frame"
0 0 22 3 1 #" "
0 0 14 3 9 #"max-frame"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 33 #"buffer-largest-sample/range/right"
0 0 22 3 2 #" ("
0 0 14 3 11 #"rsound-data"
0 0 22 3 1 #" "
0 0 14 3 5 #"sound"
0 0 22 3 3 #") ("
0 0 14 3 9 #"rs-frames"
0 0 22 3 1 #" "
0 0 14 3 5 #"sound"
0 0 22 3 2 #") "
0 0 14 3 9 #"min-frame"
0 0 22 3 1 #" "
0 0 14 3 9 #"max-frame"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 27 #"buffer-largest-sample/range"
0 0 22 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 22 3 1 #" "
0 0 14 3 5 #"start"
0 0 22 3 1 #" "
0 0 14 3 4 #"stop"
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 34 #"buffer-largest-sample/range/helper"
0 0 22 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 8 #"channels"
0 0 22 3 1 #" "
0 0 14 3 5 #"start"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 39 #"                                      ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 8 #"channels"
0 0 22 3 1 #" "
0 0 14 3 4 #"stop"
0 0 22 3 2 #") "
0 0 20 3 1 #"1"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 48 #";; what's the largest sample from min to max-1 ?"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 20 #";; left-channel only"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 32 #"buffer-largest-sample/range/left"
0 0 22 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 1 #" "
0 0 14 3 9 #"min-frame"
0 0 22 3 1 #" "
0 0 14 3 9 #"max-frame"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 18 #"frame-range-checks"
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 1 #" "
0 0 14 3 9 #"min-frame"
0 0 22 3 1 #" "
0 0 14 3 9 #"max-frame"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 34 #"buffer-largest-sample/range/helper"
0 0 22 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 22 29 1 #"\n"
0 0 22 3 39 #"                                      ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 8 #"channels"
0 0 22 3 1 #" "
0 0 14 3 9 #"min-frame"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 39 #"                                      ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 8 #"channels"
0 0 22 3 1 #" "
0 0 14 3 9 #"max-frame"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 38 #"                                      "
0 0 20 3 1 #"2"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 21 #";; right channel only"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 33 #"buffer-largest-sample/range/right"
0 0 22 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 1 #" "
0 0 14 3 9 #"min-frame"
0 0 22 3 1 #" "
0 0 14 3 9 #"max-frame"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 18 #"frame-range-checks"
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 1 #" "
0 0 14 3 9 #"min-frame"
0 0 22 3 1 #" "
0 0 14 3 9 #"max-frame"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 34 #"buffer-largest-sample/range/helper"
0 0 22 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 22 29 1 #"\n"
0 0 22 3 39 #"                                      ("
0 0 14 3 4 #"add1"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 8 #"channels"
0 0 22 3 1 #" "
0 0 14 3 9 #"min-frame"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 39 #"                                      ("
0 0 14 3 4 #"add1"
0 0 22 3 2 #" ("
0 0 14 3 1 #"*"
0 0 22 3 1 #" "
0 0 14 3 8 #"channels"
0 0 22 3 1 #" "
0 0 14 3 9 #"max-frame"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 38 #"                                      "
0 0 20 3 1 #"2"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 39 #";; sample-based, for internal use only:"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 34 #"buffer-largest-sample/range/helper"
0 0 22 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 22 3 1 #" "
0 0 14 3 10 #"min-sample"
0 0 22 3 1 #" "
0 0 14 3 10 #"max-sample"
0 0 22 3 1 #" "
0 0 14 3 9 #"increment"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 8 #"for/fold"
0 0 22 3 3 #" (["
0 0 14 3 10 #"max-so-far"
0 0 22 3 1 #" "
0 0 20 3 3 #"0.0"
0 0 22 3 2 #"])"
0 0 22 29 1 #"\n"
0 0 22 3 14 #"            (["
0 0 14 3 1 #"i"
0 0 22 3 2 #" ("
0 0 14 3 8 #"in-range"
0 0 22 3 1 #" "
0 0 14 3 10 #"min-sample"
0 0 22 3 1 #" "
0 0 14 3 10 #"max-sample"
0 0 22 3 1 #" "
0 0 14 3 9 #"increment"
0 0 22 3 3 #")])"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 3 #"max"
0 0 22 3 1 #" "
0 0 14 3 10 #"max-so-far"
0 0 22 3 2 #" ("
0 0 14 3 3 #"abs"
0 0 22 3 2 #" ("
0 0 14 3 13 #"s16vector-ref"
0 0 22 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 22 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 15 #";; frame-checks"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 18 #"frame-range-checks"
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 1 #" "
0 0 14 3 9 #"min-frame"
0 0 22 3 1 #" "
0 0 14 3 9 #"max-frame"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 4 #"when"
0 0 22 3 2 #" ("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 3 #"and"
0 0 22 3 2 #" ("
0 0 14 3 2 #"<="
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #" "
0 0 14 3 9 #"min-frame"
0 0 22 3 3 #") ("
0 0 14 3 2 #"<="
0 0 22 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #" "
0 0 14 3 9 #"max-frame"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 14 3 2 #"<="
0 0 22 3 1 #" "
0 0 14 3 9 #"min-frame"
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 3 #") ("
0 0 14 3 2 #"<="
0 0 22 3 1 #" "
0 0 14 3 9 #"max-frame"
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 18 #"frame-range-checks"
0 0 22 3 1 #" "
0 0 19 3 44 #"\"range limits ~v and ~v not in range 0 - ~v\""
0 0 22 3 1 #" "
0 0 14 3 9 #"min-frame"
0 0 22 3 1 #" "
0 0 14 3 9 #"max-frame"
0 0 22 3 1 #" "
0 0 14 3 6 #"frames"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 4 #"when"
0 0 22 3 2 #" ("
0 0 14 3 3 #"not"
0 0 22 3 2 #" ("
0 0 14 3 1 #"<"
0 0 22 3 1 #" "
0 0 14 3 9 #"min-frame"
0 0 22 3 1 #" "
0 0 14 3 9 #"max-frame"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 5 #"error"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 18 #"frame-range-checks"
0 0 22 3 1 #" "
0 0 19 3 65
#"\"range limits ~v and ~v not in order and separated by at least 1\""
0 0 22 3 1 #" "
0 0 14 3 9 #"min-frame"
0 0 22 3 1 #" "
0 0 14 3 9 #"max-frame"
0 0 22 3 3 #")))"
0           0
